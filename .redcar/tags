1386956252
Any	/home/mike/app/ov/lib/ov/ov_any.rb	  class Any 
Fail	/home/mike/app/ov/samples/service.rb	class Fail
Get	/home/mike/app/ov/samples/rack.rb	class Get 
M	/home/mike/app/ov/samples/service.rb	class M 
Matching	/home/mike/app/ov/samples/pm.rb	module Matching
MyArray	/home/mike/app/ov/samples/myarray.rb	class MyArray 
NotImplementError	/home/mike/app/ov/lib/ov/exception.rb	class NotImplementError 
OA	/home/mike/app/ov/lib/ov/ov_array.rb	  class OA 
Ov	/home/mike/app/ov/lib/ov/ov_method.rb	module Ov 
Ov	/home/mike/app/ov/lib/ov/ov_array.rb	module Ov
Ov	/home/mike/app/ov/lib/ov/version.rb	module Ov
Ov	/home/mike/app/ov/lib/ov/ov_any.rb	module Ov
Ov	/home/mike/app/ov/lib/ov.rb	module Ov
OverrideMethod	/home/mike/app/ov/lib/ov/ov_method.rb	  class OverrideMethod 
Post	/home/mike/app/ov/samples/rack.rb	class Post 
RackExample	/home/mike/app/ov/samples/rack.rb	class RackExample
Request	/home/mike/app/ov/samples/rack.rb	class Rack::Request
Result	/home/mike/app/ov/samples/service.rb	class Result
SO	/home/mike/app/ov/samples/service.rb	module SO
Test	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	class Test
Test0	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	class Test0 
TestAny	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	class TestAny
TestException	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	class TestException
TestInitialize	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	class TestInitialize
TestWithoutArguments	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	class TestWithoutArguments 
VERSION	/home/mike/app/ov/lib/ov/version.rb	  VERSION =
__overridable_methods	/home/mike/app/ov/lib/ov.rb	  def __overridable_methods 
ancestors	/home/mike/app/ov/lib/ov/ov_method.rb	    attr_accessor :types, :body, :name, :owner, :ancestors
arg	/home/mike/app/ov/spec/fixtures/fixture_classes.rb	  attr_reader :arg 
arr	/home/mike/app/ov/samples/myarray.rb	  attr_accessor :arr
body	/home/mike/app/ov/lib/ov/ov_method.rb	    attr_accessor :types, :body, :name, :owner, :ancestors
call	/home/mike/app/ov/samples/rack.rb	  def call(env)
compare	/home/mike/app/ov/lib/ov/ov_array.rb	    def compare(a, b)
compare0	/home/mike/app/ov/lib/ov/ov_array.rb	    def compare0(a, b)
compare?	/home/mike/app/ov/lib/ov/ov_method.rb	    def compare?(a, b)
complete	/home/mike/app/ov/lib/ov/ov_array.rb	    attr_accessor :complete, :result
eql0?	/home/mike/app/ov/lib/ov/ov_method.rb	    def eql0?(other)
eql?	/home/mike/app/ov/lib/ov/ov_method.rb	    def eql?(other)
exception when many arguments or without arguments	/home/mike/app/ov/spec/override_spec.rb	it "exception when many arguments or without arguments" do
find_or_next	/home/mike/app/ov/lib/ov/ov_array.rb	    def find_or_next(method, &block)
get	/home/mike/app/ov/samples/service.rb	  def self.get(request)
get	/home/mike/app/ov/lib/ov/ov_array.rb	    alias :get
included	/home/mike/app/ov/lib/ov.rb	  def self.included(base) 
initialize	/home/mike/app/ov/samples/service.rb	  def initialize(string)
initialize	/home/mike/app/ov/lib/ov/ov_method.rb	    def initialize(name, types, owner, body = proc{})
let	/home/mike/app/ov/lib/ov.rb	  def let(name, *types, &block)
like0?	/home/mike/app/ov/lib/ov/ov_method.rb	    def like0?(other)
like?	/home/mike/app/ov/lib/ov/ov_method.rb	    def like?(other)
match	/home/mike/app/ov/samples/pm.rb	  def match(*args, &block)
name	/home/mike/app/ov/lib/ov/ov_method.rb	    attr_accessor :types, :body, :name, :owner, :ancestors
otherwise	/home/mike/app/ov/samples/pm.rb	      def otherwise(&block)
owner	/home/mike/app/ov/lib/ov/ov_method.rb	    attr_accessor :types, :body, :name, :owner, :ancestors
req_method	/home/mike/app/ov/samples/rack.rb	  def req_method
result	/home/mike/app/ov/lib/ov/ov_array.rb	    attr_accessor :complete, :result
return array	/home/mike/app/ov/spec/override_spec.rb	it "return array" do
return new instance with #this method	/home/mike/app/ov/spec/override_spec.rb	it "return new instance with #this method" do
return overridable method	/home/mike/app/ov/spec/override_spec.rb	it "return overridable method" do
return string	/home/mike/app/ov/spec/override_spec.rb	it "return string" do
should call own method	/home/mike/app/ov/spec/override_spec.rb	it "should call own method" do
should call parent method	/home/mike/app/ov/spec/override_spec.rb	it "should call parent method" do
string	/home/mike/app/ov/samples/service.rb	  attr_accessor :string
throw NotImplementError when method not defined	/home/mike/app/ov/spec/override_spec.rb	it "throw NotImplementError when method not defined" do
try	/home/mike/app/ov/samples/pm.rb	      def try(*args, &block)
types	/home/mike/app/ov/lib/ov/ov_method.rb	    attr_accessor :types, :body, :name, :owner, :ancestors
where	/home/mike/app/ov/lib/ov/ov_array.rb	    def where(method)
